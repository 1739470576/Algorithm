#include <iostream>
#include <climits>
#include <string>
using namespace std;			
struct Dis {
	string path;
	int value;
	bool visit;
};	


void dijkstra(int vexnum, int edge, int begin){
	int arc[vexnum][vexnum];
	for (int i=0; i<vexnum; i++){
		for (int j=0; j<vexnum; j++){
			arc[i][j] = INT_MAX;
		}
	}
	int start;
	int end;
	int weight;
	for (int k=0; k<edge; k++){
		cin >> start >> end >> weight;
		arc[start-1][end-1] = weight;
	}


	Dis dis[vexnum];
	for (int i=0; i<vexnum; i++){
		dis[i].value = arc[begin-1][i];
		dis[i].path = "v" + to_string(begin) + "-->v" + to_string(i + 1);
		dis[i].visit = false;
	}
	dis[begin-1].value = 0;
	dis[begin-1].visit = true;
	int count = 1;
	while (count != vexnum){
		int min = INT_MAX;
		int temp = 0;
		for (int i=0; i<vexnum; i++){
			if(dis[i].visit==false && dis[i].value < min){
				min = dis[i].value;
				temp = i;
			}
		}
		dis[temp].visit = true;
		count++;
		for (int i=0; i<vexnum; i++){
			if (dis[i].visit == false && arc[temp][i]!=INT_MAX && (dis[temp].value + arc[temp][i])<dis[i].value){
				dis[i].value = dis[temp].value + arc[temp][i];
				dis[i].path = dis[temp].path + "-->v" + to_string(i + 1);
			}
		}
	}
	
	for (int i=0; i<vexnum; i++){
		if (dis[i].value != INT_MAX){
			cout << dis[i].path << "=" << dis[i].value << endl;
		}
		else{
			cout << "no shortest path";
		}
	}
	
}


int main()
{
	int vexnum;
	int edge;
	cin >> vexnum >> edge;
	dijkstra(vexnum,edge,1);
}